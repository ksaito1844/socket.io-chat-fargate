AWSTemplateFormatVersion: '2010-09-09'
Transform:
  - 'AWS::Serverless-2016-10-31'
  - 'AWS::LanguageExtensions'
Description: A Lambda function that receives DynamoDB Stream updates from the chat message table
             and indexes the chat messages in OpenSearch Serverless
Parameters:
  EnvironmentName:
    Type: String
    Default: production
    Description: A name for the environment that this cloudformation will be part of.
                 Used to locate other resources in the same environment.

Resources:
  ChatMessageIndexerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Chat message indexer security group"
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}:VPCId"

  ChatMessageIndexer:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: app.handler
      Runtime: nodejs14.x
      CodeUri: ../services/message-indexer
      Description: An Amazon DynamoDB trigger that indexes messages in the messages table
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          MESSAGE_COLLECTION_ENDPOINT:
            Fn::ImportValue: !Sub "${EnvironmentName}:MessagesCollectionEndpoint"
      VpcConfig:
        SecurityGroupIds:
          - !Ref ChatMessageIndexerSecurityGroup
        SubnetIds:
          - Fn::ImportValue: !Sub "${EnvironmentName}:PublicSubnetOne"
          - Fn::ImportValue: !Sub "${EnvironmentName}:PublicSubnetTwo"
      Policies:
        Statement:
          -  Effect: "Allow"
             Action:
               - "aoss:*"
             Resource:
               - "*"
      Events:
        MyDynamoDBtable:
          Type: DynamoDB
          Properties:
            Stream:
              Fn::ImportValue: !Sub "${EnvironmentName}:MessagesTableStreamArn"
            StartingPosition: TRIM_HORIZON
            BatchSize: 100

  # Create the access policy which allows the IAM role of the Lambda function to use OpenSearch Serverless
  MessageCollectionAccessPolicy:
    Type: AWS::OpenSearchServerless::AccessPolicy
    Properties:
      Name: 'chat-message-access-policy'
      Description: 'Who can access the indexed chat messages, and how'
      Type: 'data'
      Policy:
        Fn::ToJsonString:
          - Description: Access for Lambda function URL
            Rules:
              - ResourceType: collection
                Resource:
                  - collection/chat-messages
                Permission:
                  - aoss:CreateCollectionItems
                  - aoss:DeleteCollectionItems
                  - aoss:UpdateCollectionItems
                  - aoss:DescribeCollectionItems
              - ResourceType: index
                Resource:
                  - index/chat-messages/*
                Permission:
                  - aoss:CreateIndex
                  - aoss:DeleteIndex
                  - aoss:UpdateIndex
                  - aoss:DescribeIndex
                  - aoss:ReadDocument
                  - aoss:WriteDocument
            Principal:
              - !GetAtt ChatMessageIndexerRole.Arn

  # Create the network access policy which allows the Lambda function to talk to collection
  ChatIndexerAccessToOpenSearchServerless:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: -1
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !GetAtt 'ChatMessageIndexerSecurityGroup.GroupId'
      GroupId:
        Fn::ImportValue: !Sub '${EnvironmentName}:OpenSearchServerlessGroupId'
